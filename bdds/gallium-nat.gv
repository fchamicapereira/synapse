digraph mygraph {
	node [shape=box style=rounded border=0];
	subgraph clusterprocess {
		node [style="rounded,filled",color=black];
		134 [label="134:fwd(0)", fillcolor="chartreuse2"];
		46 [label="46:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		46 -> 134;
		45 [label="45:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761241[(vector_data_reset__35[3])++((vector_data_reset__35[2])++((vector_data_reset__35[1])++((vector_data_reset__35[0])++((packet_chunks[56])++((packet_chunks[55])++((packet_chunks[54])++((packet_chunks[53])++((checksum__43[1])++((checksum__43[0])++(packet_chunks[41:50]))))))))))])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		45 -> 46;
		44 [label="44:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761282[(vector_data_reset__35[9])++((vector_data_reset__35[8])++(packet_chunks[82:83]))])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		44 -> 45;
		43 [label="43:nf_set_rte_ipv4_udptcp_checksum(\l  ip_header:1073761241,\l  l4_header:1073761282,\l  packet:1073920736)\l=>{checksum__43}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		43 -> 44;
		135 [label="135:drop()", fillcolor="brown1"];
		54 [label="54:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		54 -> 135;
		53 [label="53:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761241[packet_chunks[41:60]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		53 -> 54;
		52 [label="52:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761282[packet_chunks[82:85]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		52 -> 53;
		41 [shape=Mdiamond, label="41:(vector_data_reset__35[12] == packet_chunks[50])", fillcolor="yellow"];
		41 -> 43 [label="True"];
		41 -> 52 [label="False"];
		136 [label="136:drop()", fillcolor="brown1"];
		62 [label="62:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		62 -> 136;
		61 [label="61:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761241[packet_chunks[41:60]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		61 -> 62;
		60 [label="60:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761282[packet_chunks[82:85]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		60 -> 61;
		39 [shape=Mdiamond, label="39:(vector_data_reset__35[10:11] == packet_chunks[82:83])", fillcolor="yellow"];
		39 -> 41 [label="True"];
		39 -> 60 [label="False"];
		137 [label="137:drop()", fillcolor="brown1"];
		70 [label="70:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		70 -> 137;
		69 [label="69:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761241[packet_chunks[41:60]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		69 -> 70;
		68 [label="68:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761282[packet_chunks[82:85]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		68 -> 69;
		37 [shape=Mdiamond, label="37:(vector_data_reset__35[4:7] == packet_chunks[53:56])", fillcolor="yellow"];
		37 -> 39 [label="True"];
		37 -> 68 [label="False"];
		36 [label="36:vector_return(\l  index:packet_chunks[84:85],\l  value:1073947424[vector_data_reset__35],\l  vector:1073935016)\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		36 -> 37;
		35 [label="35:vector_borrow(\l  index:packet_chunks[84:85],\l  val_out:1074074136[ -> 1073947424],\l  vector:1073935016)\l=>{vector_data_reset__35[vector_data_reset__35]}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		35 -> 36;
		138 [label="138:fwd(1)", fillcolor="chartreuse2"];
		89 [label="89:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		89 -> 138;
		88 [label="88:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761241[(packet_chunks[60])++((packet_chunks[59])++((packet_chunks[58])++((packet_chunks[57])++((0)++((0)++((0)++((0)++((checksum__86[1])++((checksum__86[0])++(packet_chunks[41:50]))))))))))])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		88 -> 89;
		87 [label="87:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761282[(packet_chunks[85])++((packet_chunks[84])++((((vector_data_reset__79 & 255) << 8) | ((vector_data_reset__79 & 65280) >> 8))))])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		87 -> 88;
		86 [label="86:nf_set_rte_ipv4_udptcp_checksum(\l  ip_header:1073761241,\l  l4_header:1073761282,\l  packet:1073920736)\l=>{checksum__86}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		86 -> 87;
		85 [label="85:vector_return(\l  index:vector_data_reset__79,\l  value:1073947424[(171)++((171)++((171)++(packet_chunks[50]++packet_chunks[82:85]++packet_chunks[53:60])))],\l  vector:1073935016)\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		85 -> 86;
		84 [label="84:map_put(\l  key:1073947424[packet_chunks[50]++packet_chunks[82:85]++packet_chunks[53:60]],\l  map:1073921192,\l  value:vector_data_reset__79)\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		84 -> 85;
		83 [label="83:vector_borrow(\l  index:vector_data_reset__79,\l  val_out:1074098232[ -> 1073947424],\l  vector:1073935016)\l=>{vector_data_reset__83[vector_data_reset__83]}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		83 -> 84;
		82 [label="82:vector_return(\l  index:0,\l  value:1073960216[(1 + vector_data_reset__79)],\l  vector:1073947808)\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		82 -> 83;
		139 [label="139:drop()", fillcolor="brown1"];
		98 [label="98:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		98 -> 139;
		97 [label="97:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761241[packet_chunks[41:60]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		97 -> 98;
		96 [label="96:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761282[packet_chunks[82:85]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		96 -> 97;
		95 [label="95:vector_return(\l  index:0,\l  value:1073960216[vector_data_reset__79],\l  vector:1073947808)\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		95 -> 96;
		80 [shape=Mdiamond, label="80:(vector_data_reset__79 < 65536)", fillcolor="yellow"];
		80 -> 82 [label="True"];
		80 -> 95 [label="False"];
		79 [label="79:vector_borrow(\l  index:0,\l  val_out:1074098184[ -> 1073960216],\l  vector:1073947808)\l=>{vector_data_reset__79[vector_data_reset__79]}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}\l{(vector_data_reset__79 <= 65536)}", fillcolor="cornflowerblue"];
		79 -> 80;
		140 [label="140:fwd(1)", fillcolor="chartreuse2"];
		107 [label="107:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		107 -> 140;
		106 [label="106:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761241[(packet_chunks[60])++((packet_chunks[59])++((packet_chunks[58])++((packet_chunks[57])++((0)++((0)++((0)++((0)++((checksum__104[1])++((checksum__104[0])++(packet_chunks[41:50]))))))))))])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		106 -> 107;
		105 [label="105:packet_return_chunk(\l  p:1074084720,\l  the_chunk:1073761282[(packet_chunks[85])++((packet_chunks[84])++(allocated_index__76))])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		105 -> 106;
		104 [label="104:nf_set_rte_ipv4_udptcp_checksum(\l  ip_header:1073761241,\l  l4_header:1073761282,\l  packet:1073920736)\l=>{checksum__104}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		104 -> 105;
		77 [shape=Mdiamond, label="77:!map_has_this_key__76", fillcolor="yellow"];
		77 -> 79 [label="True"];
		77 -> 104 [label="False"];
		76 [label="76:map_get(\l  key:1074095740[packet_chunks[50]++packet_chunks[82:85]++packet_chunks[53:60]],\l  map:1073921192,\l  value_out:1074097840[2880154539 -> allocated_index__76]) -> 1\l=>{map_has_this_key__76[1]}\l=>{allocated_index__76[allocated_index__76]}\l{((VIGOR_DEVICE[3])++((VIGOR_DEVICE[2])++(0)) < 2)}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		76 -> 77;
		33 [shape=Mdiamond, label="33:(0 != VIGOR_DEVICE)", fillcolor="yellow"];
		33 -> 35 [label="True"];
		33 -> 76 [label="False"];
		32 [label="32:packet_borrow_next_chunk(\l  chunk:1074073808[ -> 1073761282],\l  length:4,\l  p:1074061040)\l=>{packet_chunks[packet_chunks[82:85]]}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}\l{!(!((6 == packet_chunks[50]) | (17 == packet_chunks[50])) | ((4294967262 + pkt_len) < 4))}", fillcolor="cornflowerblue"];
		32 -> 33;
		141 [label="141:drop()", fillcolor="brown1"];
		114 [label="114:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761200[packet_chunks])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		114 -> 141;
		113 [label="113:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761241[packet_chunks[41:60]])\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		113 -> 114;
		30 [shape=Mdiamond, label="30:(((6 == packet_chunks[50]) | (17 == packet_chunks[50])) & ((4294967262 + pkt_len) >= 4))", fillcolor="yellow"];
		30 -> 32 [label="True"];
		30 -> 113 [label="False"];
		28 [label="28:packet_borrow_next_chunk(\l  chunk:1074073152[ -> 1073761241],\l  length:20,\l  p:1074061040)\l=>{packet_chunks[packet_chunks[41:60]]}\l{!(!(8 == packet_chunks[12:13]) | ((4294967282 + pkt_len) < 20))}", fillcolor="cornflowerblue"];
		28 -> 30;
		142 [label="142:drop()", fillcolor="brown1"];
		120 [label="120:packet_return_chunk(\l  p:1074061040,\l  the_chunk:1073761200[packet_chunks])", fillcolor="cornflowerblue"];
		120 -> 142;
		26 [shape=Mdiamond, label="26:((8 == packet_chunks[12:13]) & (20 <= (4294967282 + pkt_len)))", fillcolor="yellow"];
		26 -> 28 [label="True"];
		26 -> 120 [label="False"];
		24 [label="24:packet_borrow_next_chunk(\l  chunk:1074072416[ -> 1073761200],\l  length:14,\l  p:1074061040)\l=>{packet_chunks[packet_chunks]}", fillcolor="cornflowerblue"];
		24 -> 26;
		15 [label="15:current_time() -> next_time__15\l=>{next_time__15[next_time__15]}", fillcolor="cornflowerblue"];
		15 -> 24;
	}
}